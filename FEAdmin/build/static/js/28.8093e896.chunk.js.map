{"version":3,"sources":["app/views/sessions/SessionService.js","app/views/utilities/UploadFile.jsx","app/views/sessions/SignUp_RegisterHealthOrg.jsx"],"names":["API_PATH","ConstantList","API_ENPOINT","signUpAndCreateHealthOrg","item","url","axios","post","checkUsername","checkEmail","Component","toast","configure","SignUp","props","_this","Object","classCallCheck","this","_super","call","state","username","email","password","re_password","agreement","confirmPassword","isView","eqaRound","healthOrgType","hasErrorEQARound","hasErrorHealthOrgType","shouldOpenSignupSuccessDialog","passwordIsMasked","confirmPasswordIsMasked","handleChange","event","source","persist","setState","target","checked","[object Object]","name","value","handleSelectEQARound","itemSelected","handleSelectHealthOrgType","handleFormSubmit","registerDto","t","_this$state","trim","length","warning","then","result","data","error","duplicateEmail","sendEmailFailed","success","history","push","togglePasswordMask","prevState","toggleConfirmPasswordMask","_this2","ValidatorForm","addValidationRule","removeValidationRule","_this3","_this$props","_this$state2","i18n","fax","officerPosion","unitCodeOfProgramPEQAS","taxCodeOfTheUnit","address","description","contactName","contactPhone","listEQARound","listHealthOrgType","react_default","a","createElement","lib","ref","onSubmit","className","Card","Grid","container","lg","md","sm","xs","src","alt","spacing","size","variant","label","style","color","onChange","type","validators","errorMessages","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","Icon","title","Button","ROOT_PATH","connect"],"mappings":"8PAEMA,EAAWC,IAAaC,YAAc,UAoB/BC,EAA2B,SAAAC,GACtC,IAAIC,EAAML,EAAW,4BACrB,OAAOM,IAAMC,KAAKF,EAAKD,IAGZI,EAAgB,SAAAJ,GAC3B,IAAIC,EAAML,EAAW,iBACrB,OAAOM,IAAMC,KAAKF,EAAKD,IAGZK,EAAa,SAAAL,GACxB,IAAIC,EAAML,EAAW,cACrB,OAAOM,IAAMC,KAAKF,EAAKD,iBC9B0BM,mCC6BnDC,IAAMC,gBAaAC,oDACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAI,EAAAC,KAAAF,KAAMJ,IAaRO,MAAQ,CACNC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,YAAa,GACbC,WAAW,EACXC,gBAAiB,GACjBC,QAAQ,EACRC,SAAU,KACVC,cAAe,KAEfC,kBAAkB,EAElBC,uBAAuB,EACvBC,+BAA+B,EAC/BC,kBAAkB,EAClBC,yBAAyB,GA9BRpB,EAiCnBqB,aAAe,SAACC,EAAOC,GACrBD,EAAME,UACQ,aAAXD,GACDvB,EAAKyB,SAAS,CAACZ,QAASS,EAAMI,OAAOC,QAAShB,UAAWW,EAAMI,OAAOC,UAExE3B,EAAKyB,SAAS,CACZG,CAACN,EAAMI,OAAOG,MAAOP,EAAMI,OAAOI,SAvCnB9B,EA2CnB+B,qBAAuB,SAAAC,GACrB,IAAI3C,EAAO2C,EAAaN,OAAOI,MAC/B9B,EAAKyB,SAAS,CAAEX,SAAUzB,GAAQ,eA7CjBW,EAgDnBiC,0BAA4B,SAAAD,GAC1B,IAAI3C,EAAO2C,EAAaN,OAAOI,MAC/B9B,EAAKyB,SAAS,CAAEV,cAAe1B,GAAQ,eAlDtBW,EAqDnBkC,iBAAmB,SAAAZ,GACjB,IAAIa,EAAc,GACZC,EAAMpC,EAAKD,MAAXqC,EAFoBC,EAGKrC,EAAKM,MAA9BG,EAHoB4B,EAGpB5B,SAAUC,EAHU2B,EAGV3B,YAChByB,EAAY3B,MAAQR,EAAKM,MAAME,MAAM8B,OACrCH,EAAY5B,SAAWP,EAAKM,MAAME,MAAM8B,OACrC7B,EAAS8B,OAAS,GAAK7B,EAAY6B,OAAS,EAC7C3C,IAAM4C,QAAQJ,EAAE,0BAGb3B,IAAaC,EAKlBjB,EAAc0C,GAAaM,KACzB,SAAAC,GACMA,GAAUA,EAAOC,MAAuB,IAAfD,EAAOC,KAClC/C,IAAMgD,MAAMR,EAAE,4BAEd1C,EAAWyC,GAAaM,KACtB,SAAAC,GACMA,GAAUA,EAAOC,MAAuB,IAAfD,EAAOC,KAClC/C,IAAMgD,MAAMR,EAAE,4BAEdhD,EAAyBY,EAAKM,OAAOmC,KAAK,SAAAC,GAE5B,MAAVA,GACe,MAAfA,EAAOC,MACQ,IAAfD,EAAOC,KAEHD,EAAOC,KAAKE,eACdjD,IAAMgD,MAAMR,EAAE,4BACLM,EAAOC,KAAKG,iBACrBlD,IAAMgD,MAAMR,EAAE,wBAGhBxC,IAAMgD,MAAMR,EAAE,yBAGhBxC,IAAMmD,QAAQX,EAAE,gBAChBpC,EAAKD,MAAMiD,QAAQC,KAAK,sBAI9B,SAAAL,GAEEhD,IAAMgD,MAAMR,EAAE,4BAKtB,SAAAQ,GAEEhD,IAAMgD,MAAMR,EAAE,2BA3CdxC,IAAM4C,QAAQJ,EAAE,4BAhEHpC,EAqInBkD,mBAAqB,WACnBlD,EAAKyB,SAAS,SAAA0B,GAAS,MAAK,CAC1BhC,kBAAmBgC,EAAUhC,qBAvIdnB,EA2InBoD,0BAA4B,WAC1BpD,EAAKyB,SAAS,SAAA0B,GAAS,MAAK,CAC1B/B,yBAA0B+B,EAAU/B,4BA7IrBpB,uDAgHnB,WAAoB,IAAAqD,EAAAlD,KAElBmD,gBAAcC,kBAAkB,kBAAmB,SAAAzB,GACjD,OAAIA,IAAUuB,EAAK/C,MAAMG,WAK3B6C,gBAAcC,kBAAkB,iBAAkB,SAAAzB,GAChD,QAAIA,EAAMS,OAAS,0CAOvB,WAEEe,gBAAcE,qBAAqB,yCAerC,WAAS,IAAAC,EAAAtD,KAAAuD,EACavD,KAAKJ,MAAjBqC,EADDsB,EACCtB,EADDuB,GAAAD,EACIE,KAyBPzD,KAAKG,OAvBPuD,EAHKF,EAGLE,IACAC,EAJKH,EAILG,cACAC,EALKJ,EAKLI,uBACAlC,EANK8B,EAML9B,KACAmC,EAPKL,EAOLK,iBAEAC,GATKN,EAQLO,YARKP,EASLM,SAEAE,GAXKR,EAUL5C,cAVK4C,EAWLQ,aACAC,EAZKT,EAYLS,aAOA5D,GAnBKmD,EAaLU,aAbKV,EAcL7C,SAdK6C,EAeL3C,iBAfK2C,EAgBLW,kBAhBKX,EAiBL1C,sBAjBK0C,EAkBLpD,SAlBKoD,EAmBLnD,OACAC,EApBKkD,EAoBLlD,SAGAC,GAvBKiD,EAqBL9C,OArBK8C,EAuBLjD,aACAS,EAxBKwC,EAwBLxC,iBACAC,EAzBKuC,EAyBLvC,wBAGF,OACEmD,EAAAC,EAAAC,cAACC,EAAA,cAAD,CAAeC,IAAI,OAAOC,SAAUzE,KAAK+B,kBACvCqC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yCACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,kDACdN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,WAAS,GACbT,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yDACbN,EAAAC,EAAAC,cAAA,OACEY,IAAI,iDACJC,IAAI,OAIVf,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrCb,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,WAAS,EAACO,QAAS,GACvBhB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrCb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACbN,EAAAC,EAAAC,cAAA,MAAII,UAAU,eACXzC,EAAE,0BAKXmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIP,UAAU,QACnDN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,WAAS,EAACO,QAAS,GACvBhB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLX,UAAU,QACVY,QAAQ,WACRC,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,0BAGLyD,SAAU1F,KAAKkB,aACfyE,KAAK,OACLjE,KAAK,OACLC,MAAOD,EACPkE,WAAY,CAAC,YACbC,cAAe,CAAC5D,EAAE,sCAGtBmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLX,UAAU,QACVY,QAAQ,WACRC,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,UAGLyD,SAAU1F,KAAKkB,aACfyE,KAAK,QACLjE,KAAK,QACLC,MAAOtB,EACPuF,WAAY,CAAC,WAAY,WACzBC,cAAe,CACb5D,EAAE,kCACFA,EAAE,yCAKRmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLC,QAAQ,WACRZ,UAAU,QACVa,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,6BAGLyD,SAAU1F,KAAKkB,aACfyE,KAAK,OACLjE,KAAK,mBACLC,MAAOkC,EACP+B,WAAY,CAAC,YACbC,cAAe,CAAC5D,EAAE,sCAItBmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLC,QAAQ,WACRZ,UAAU,QACVa,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,mCAGLyD,SAAU1F,KAAKkB,aACfyE,KAAK,OACLjE,KAAK,yBACLC,MAAOiC,EACPgC,WAAY,CAAC,YACbC,cAAe,CAAC5D,EAAE,sCAGtBmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLC,QAAQ,WACRZ,UAAU,QACVa,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,wBAGLyD,SAAU1F,KAAKkB,aACfyE,KAAK,OACLjE,KAAK,cACLC,MAAOqC,EACP4B,WAAY,CAAC,YACbC,cAAe,CAAC5D,EAAE,sCAGtBmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLC,QAAQ,WACRZ,UAAU,QACVa,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,0BAGLyD,SAAU1F,KAAKkB,aACfyE,KAAK,OACLjE,KAAK,gBACLC,MAAOgC,EACPiC,WAAY,CAAC,YACbC,cAAe,CAAC5D,EAAE,sCAGtBmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLC,QAAQ,WACRZ,UAAU,QACVa,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,yBAGLyD,SAAU1F,KAAKkB,aACfyE,KAAK,OACLjE,KAAK,eACLC,MAAOsC,EACP2B,WAAY,CAAC,WAAY,uBAAwB,kBACjDC,cAAe,CACb5D,EAAE,kCACFA,EAAE,8CACFA,EAAE,kDAIRmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAClCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLC,QAAQ,WACRZ,UAAU,QACVa,MAAOtD,EAAE,eACTyD,SAAU1F,KAAKkB,aACfyE,KAAK,OACLjE,KAAK,MACLC,MAAO+B,KAGXU,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrCb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEc,KAAK,QACLC,QAAQ,WACRZ,UAAU,QACVa,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,oBAGLyD,SAAU1F,KAAKkB,aACfQ,KAAK,UACLC,MAAOmC,EACP8B,WAAY,CAAC,YACbC,cAAe,CAAC5D,EAAE,sCAItBmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC8F,GAAI,EAAGC,GAAI,IACpBb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEG,UAAU,cACVa,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,aAGLqD,QAAQ,WACRI,SAAU1F,KAAKkB,aACfQ,KAAK,WACLiE,KAAM3E,EAAmB,WAAa,OACtCW,MAAOrB,EACPsF,WAAY,CAAC,YACbC,cAAe,CAAC5D,EAAE,mCAClB6D,WAAY,CACVC,aACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAgBC,SAAS,OACvB7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAYC,QAASnG,KAAK+C,oBACvB/B,EACCoD,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEX,MAAM,UACNY,MAAOpE,EAAE,kBAFX,kBAOAmC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEX,MAAM,UACNY,MAAOpE,EAAE,kBAFX,oBAadmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC8F,GAAI,EAAGC,GAAI,IACpBb,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEG,UAAU,cACVa,MACAnB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMkB,MAAO,CAAEC,MAAO,QAAtB,OACCxD,EAAE,gBAGLqD,QAAQ,WACRI,SAAU1F,KAAKkB,aACfQ,KAAK,cACLiE,KAAM1E,EAA0B,WAAa,OAC7CU,MAAOpB,EACPqF,WAAY,CAAC,WAAY,mBACzBC,cAAe,CACb5D,EAAE,kCACFA,EAAE,4BAEJ6D,WAAY,CACVC,aACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAgBC,SAAS,OACvB7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACEC,QAASnG,KAAKiD,2BAEbhC,EACCmD,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEX,MAAM,UACNY,MAAOpE,EAAE,kBAFX,kBAOAmC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEX,MAAM,UACNY,MAAOpE,EAAE,kBAFX,qBAoBhBmC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAM1F,MAAI,EAAC4F,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrCb,EAAAC,EAAAC,cAAA,WAQEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,0BACbN,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACE5B,UAAU,cACVY,QAAQ,YACRG,MAAM,UAENE,KAAK,UAEJ1D,EAAE,kBAELmC,EAAAC,EAAAC,cAAA,QAAMI,UAAU,cAAczC,EAAE,OAChCmC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACE5B,UAAU,aACVY,QAAQ,YACRa,QAAS,kBACP7C,EAAK1D,MAAMiD,QAAQC,KACjB/D,IAAawH,UAAY,oBAI5BtE,EAAE,mCAhfVzC,aAogBNgH,sBAJS,SAAArG,GAAK,MAAK,IAIM,GAAzBqG,CAA6B7G","file":"static/js/28.8093e896.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport ConstantList from \"../../appConfig\";\r\nconst API_PATH = ConstantList.API_ENPOINT + \"/public\";\r\nconst API_PATH_EQARound = API_PATH + \"/EQARound\";\r\nconst API_PATH_HealthOrgType = API_PATH + \"/HealthOrgType\";\r\n\r\nexport const getAllEQARound = () => {\r\n  let searchObject = {};\r\n  searchObject.pageIndex = 1;\r\n  searchObject.pageSize = 1000;\r\n  var url = API_PATH_EQARound + \"/search\";\r\n  return axios.post(url, searchObject);\r\n};\r\n\r\nexport const getAllHealthOrgType = () => {\r\n  let searchObject = {};\r\n  searchObject.pageIndex = 1;\r\n  searchObject.pageSize = 1000;\r\n  var url = API_PATH_HealthOrgType + \"/search\";\r\n  return axios.post(url, searchObject);\r\n};\r\n\r\nexport const signUpAndCreateHealthOrg = item => {\r\n  var url = API_PATH + \"/signUpAndCreateHealthOrg\";\r\n  return axios.post(url, item);\r\n};\r\n\r\nexport const checkUsername = item => {\r\n  var url = API_PATH + \"/checkUsername\";\r\n  return axios.post(url, item);\r\n};\r\n\r\nexport const checkEmail = item => {\r\n  var url = API_PATH + \"/checkEmail\";\r\n  return axios.post(url, item);\r\n};\r\n","import React, { Component } from 'react'\r\nimport {DropzoneDialog} from 'material-ui-dropzone'\r\nimport Button from '@material-ui/core/Button';\r\n \r\nexport default class DropzoneDialogExample extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            files: []\r\n        };\r\n    }\r\n \r\n    handleClose() {\r\n        this.setState({\r\n            open: false\r\n        });\r\n    }\r\n \r\n    handleAddFile(file) {\r\n        //Saving files to state for further use and closing Modal.\r\n        // debugger;\r\n        // console.log(file);\r\n    }\r\n \r\n    handleSave(files) {\r\n        //Saving files to state for further use and closing Modal.\r\n        this.setState({\r\n            files: files,\r\n            open: false\r\n        });\r\n    }\r\n \r\n    handleOpen() {\r\n        this.setState({\r\n            open: true,\r\n        });\r\n    }\r\n \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button onClick={this.handleOpen.bind(this)}>\r\n                  Add file\r\n                </Button>\r\n                <DropzoneDialog\r\n                    open={this.state.open}\r\n                    onAdd={this.handleAddFile}\r\n                    onSave={this.handleSave.bind(this)}\r\n                    // acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\r\n                    acceptedFiles={['application/msword', 'application/vnd.ms-excel', 'application/vnd.ms-powerpoint', 'text/plain', 'application/pdf', 'image/*']}\r\n                    showPreviews={true}\r\n                    showFileNames\r\n                    filesLimit={2}\r\n                    maxFileSize={5000000}\r\n                    onClose={this.handleClose.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport {\r\n  Card,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Grid,\r\n  Button,\r\n  InputAdornment,\r\n  Select,\r\n  Input,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n  FormHelperText,\r\n  IconButton,\r\n  Icon\r\n} from \"@material-ui/core\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  getAllEQARound,\r\n  getAllHealthOrgType,\r\n  signUpAndCreateHealthOrg,\r\n  checkUsername,\r\n  checkEmail\r\n} from \"./SessionService\";\r\nimport UploadFile from \"../utilities/UploadFile\";\r\nimport { connect } from \"react-redux\";\r\nimport { useTranslation, withTranslation, Trans } from \"react-i18next\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntoast.configure();\r\n// function CheckBoxLable() {\r\n//   const { t, i18n } = useTranslation();\r\n//   return (\r\n//     <span>\r\n//       {t(\"sign_up.valid_checkbox_title\")}{\" \"}\r\n//       <i>\r\n//         <b> {t(\"sign_up.valid_checkbox_content\")} </b>\r\n//       </i>\r\n//     </span>\r\n//   );\r\n// }\r\n\r\nclass SignUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // getAllEQARound().then((result) => {\r\n    //   let listEQARound = result.data.content;\r\n    //   this.setState({ listEQARound: listEQARound });\r\n    // });\r\n\r\n    // getAllHealthOrgType().then((result) => {\r\n    //   let listHealthOrgType = result.data.content;\r\n    //   this.setState({ listHealthOrgType: listHealthOrgType });\r\n    // });\r\n  }\r\n\r\n  state = {\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    re_password: \"\",\r\n    agreement: false,\r\n    confirmPassword: \"\",\r\n    isView: true,\r\n    eqaRound: null,\r\n    healthOrgType: null,\r\n    //listEQARound: [],\r\n    hasErrorEQARound: false,\r\n    //listHealthOrgType: [],\r\n    hasErrorHealthOrgType: false,\r\n    shouldOpenSignupSuccessDialog: false,\r\n    passwordIsMasked: true,\r\n    confirmPasswordIsMasked: true\r\n  };\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if(source === \"checkbox\"){\r\n      this.setState({isView: !event.target.checked, agreement: event.target.checked });\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSelectEQARound = itemSelected => {\r\n    let item = itemSelected.target.value;\r\n    this.setState({ eqaRound: item }, function() {});\r\n  };\r\n\r\n  handleSelectHealthOrgType = itemSelected => {\r\n    let item = itemSelected.target.value;\r\n    this.setState({ healthOrgType: item }, function() {});\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    let registerDto = {};\r\n    let { t } = this.props;\r\n    let { password, re_password} = this.state;\r\n    registerDto.email = this.state.email.trim();\r\n    registerDto.username = this.state.email.trim();\r\n    if(password.length < 8 && re_password.length < 8){\r\n      toast.warning(t(\"sign_up.weak_password\"));\r\n      return\r\n    }else{\r\n      if(password !== re_password){\r\n        toast.warning(t(\"sign_up.duplicate_pass\"));\r\n        return\r\n      }\r\n    }\r\n    checkUsername(registerDto).then(\r\n      result => {\r\n        if (result && result.data && result.data != \"\") {\r\n          toast.error(t(\"sign_up.duplicate_email\"));\r\n        } else {\r\n          checkEmail(registerDto).then(\r\n            result => {\r\n              if (result && result.data && result.data != \"\") {\r\n                toast.error(t(\"sign_up.duplicate_email\"));\r\n              } else {\r\n                signUpAndCreateHealthOrg(this.state).then(result => {\r\n                  if (\r\n                    result != null &&\r\n                    result.data != null &&\r\n                    result.data != \"\"\r\n                  ) {\r\n                    if (result.data.duplicateEmail) {\r\n                      toast.error(t(\"sign_up.duplicate_email\"));\r\n                    } else if (result.data.sendEmailFailed) {\r\n                      toast.error(t(\"sign_up.error_email\"));\r\n                    }\r\n                  } else {\r\n                    toast.error(t(\"sign_up.error_signup\"));\r\n                  }\r\n\r\n                  toast.success(t(\"mess_SignUp\"));\r\n                  this.props.history.push(\"/session/signin\");\r\n                });\r\n              }\r\n            },\r\n            error => {\r\n              // alert('Có lỗi xảy ra khi đăng ký.');\r\n              toast.error(t(\"sign_up.error_signup\"));\r\n            }\r\n          );\r\n        }\r\n      },\r\n      error => {\r\n        // alert('Có lỗi xảy ra khi đăng ký.');\r\n        toast.error(t(\"sign_up.error_signup\"));\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    // custom rule will have name 'isPasswordMatch'\r\n    ValidatorForm.addValidationRule(\"isPasswordMatch\", value => {\r\n      if (value !== this.state.password) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"isLengthNumber\", value => {\r\n      if (value.length > 10) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // remove rule when it is not needed\r\n    ValidatorForm.removeValidationRule(\"isPasswordMatch\");\r\n  }\r\n\r\n  togglePasswordMask = () => {\r\n    this.setState(prevState => ({\r\n      passwordIsMasked: !prevState.passwordIsMasked\r\n    }));\r\n  };\r\n\r\n  toggleConfirmPasswordMask = () => {\r\n    this.setState(prevState => ({\r\n      confirmPasswordIsMasked: !prevState.confirmPasswordIsMasked\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { t, i18n } = this.props;\r\n    let {\r\n      fax,\r\n      officerPosion,\r\n      unitCodeOfProgramPEQAS,\r\n      name,\r\n      taxCodeOfTheUnit,\r\n      description,\r\n      address,\r\n      healthOrgType,\r\n      contactName,\r\n      contactPhone,\r\n      listEQARound,\r\n      eqaRound,\r\n      hasErrorEQARound,\r\n      listHealthOrgType,\r\n      hasErrorHealthOrgType,\r\n      username,\r\n      email,\r\n      password,\r\n      isView,\r\n      //confirmPassword,\r\n      re_password,\r\n      passwordIsMasked,\r\n      confirmPasswordIsMasked\r\n    } = this.state;\r\n\r\n    return (\r\n      <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\r\n        <div className=\"signup flex flex-center w-100 h-100vh\">\r\n          <div className=\"p-8\">\r\n            <Card className=\"signup-card-customs position-relative y-center\">\r\n              <Grid container>\r\n                <Grid item lg={2} md={2} sm={2} xs={12}>\r\n                  <div className=\"p-32 flex flex-center bg-light-gray flex-middle h-100\">\r\n                    <img\r\n                      src=\"/assets/images/illustrations/posting_photo.svg\"\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                </Grid>\r\n                <Grid item lg={10} md={10} sm={10} xs={12}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                      <div className=\"pt-16\">\r\n                        <h4 className=\"text-center\">\r\n                          {t(\"sign_up.title_form\")}\r\n                        </h4>\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item lg={12} md={12} sm={12} xs={12} className=\"m-16\">\r\n                    <Grid container spacing={2}>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          className=\"w-100\"\r\n                          variant=\"outlined\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.healthOrgName\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={name}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          className=\"w-100\"\r\n                          variant=\"outlined\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"Email\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          value={email}\r\n                          validators={[\"required\", \"isEmail\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.errorMessages_email_valid\")\r\n                          ]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.taxCodeOfTheUnit\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"taxCodeOfTheUnit\"\r\n                          value={taxCodeOfTheUnit}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.unitCodeOfProgramPEQAS\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"unitCodeOfProgramPEQAS\"\r\n                          value={unitCodeOfProgramPEQAS}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.contactName\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"contactName\"\r\n                          value={contactName}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.officerPosion\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"officerPosion\"\r\n                          value={officerPosion}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.contactPhone\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"contactPhone\"\r\n                          value={contactPhone}\r\n                          validators={[\"required\", \"matchRegexp:^[0-9]*$\", \"isLengthNumber\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.errorMessages_phone_number_invalid\"),\r\n                            t(\"general.errorMessages_phone_number_invalid\")\r\n                          ]}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={t(\"sign_up.fax\")}\r\n                          onChange={this.handleChange}\r\n                          type=\"text\"\r\n                          name=\"fax\"\r\n                          value={fax}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                        <TextValidator\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          className=\"w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"sign_up.address\")}\r\n                          </span>\r\n                          }\r\n                          onChange={this.handleChange}\r\n                          name=\"address\"\r\n                          value={address}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item sm={6} xs={12}>\r\n                        <TextValidator\r\n                          className=\"mb-16 w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"password\")}\r\n                          </span>\r\n                          }\r\n                          variant=\"outlined\"\r\n                          onChange={this.handleChange}\r\n                          name=\"password\"\r\n                          type={passwordIsMasked ? \"password\" : \"text\"}\r\n                          value={password}\r\n                          validators={[\"required\"]}\r\n                          errorMessages={[t(\"general.errorMessages_required\")]}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton onClick={this.togglePasswordMask}>\r\n                                  {passwordIsMasked ? (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"show_password\")}\r\n                                    >\r\n                                      visibility_off\r\n                                    </Icon>\r\n                                  ) : (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"hide_password\")}\r\n                                    >\r\n                                      visibility\r\n                                    </Icon>\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            )\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item sm={6} xs={12}>\r\n                        <TextValidator\r\n                          className=\"mb-16 w-100\"\r\n                          label={\r\n                          <span>\r\n                            <span style={{ color: \"red\" }}> * </span>\r\n                            {t(\"re_password\")}\r\n                          </span>\r\n                          }\r\n                          variant=\"outlined\"\r\n                          onChange={this.handleChange}\r\n                          name=\"re_password\"\r\n                          type={confirmPasswordIsMasked ? \"password\" : \"text\"}\r\n                          value={re_password}\r\n                          validators={[\"required\", \"isPasswordMatch\"]}\r\n                          errorMessages={[\r\n                            t(\"general.errorMessages_required\"),\r\n                            t(\"general.isPasswordMatch\")\r\n                          ]}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  onClick={this.toggleConfirmPasswordMask}\r\n                                >\r\n                                  {confirmPasswordIsMasked ? (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"show_password\")}\r\n                                    >\r\n                                      visibility_off\r\n                                    </Icon>\r\n                                  ) : (\r\n                                    <Icon\r\n                                      color=\"primary\"\r\n                                      title={t(\"hide_password\")}\r\n                                    >\r\n                                      visibility\r\n                                    </Icon>\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            )\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                        <UploadFile\r\n                        />\r\n                      </Grid> */}\r\n                    </Grid>\r\n\r\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                      <div>\r\n                        {/* <FormControlLabel\r\n                          className=\"w-100 mt-16\"\r\n                          name=\"agreement\"\r\n                          onChange={event => this.handleChange(event, \"checkbox\")}\r\n                          control={<Checkbox />}\r\n                          label={<CheckBoxLable />}\r\n                        /> */}\r\n                        <div className=\"flex flex-middle mt-16\">\r\n                          <Button\r\n                            className=\"capitalize \"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            // disabled= {isView}\r\n                            type=\"submit\"\r\n                          >\r\n                            {t(\"sign_up.title\")}\r\n                          </Button>\r\n                          <span className=\"ml-16 mr-8\">{t(\"or\")}</span>\r\n                          <Button\r\n                            className=\"capitalize\"\r\n                            variant=\"contained\"\r\n                            onClick={() =>\r\n                              this.props.history.push(\r\n                                ConstantList.ROOT_PATH + \"session/signin\"\r\n                              )\r\n                            }\r\n                          >\r\n                            {t(\"sign_in.title\")}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </ValidatorForm>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  // setUser: PropTypes.func.isRequired\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(SignUp);\r\n"],"sourceRoot":""}