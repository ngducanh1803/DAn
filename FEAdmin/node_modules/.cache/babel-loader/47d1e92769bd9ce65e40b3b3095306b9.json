{"ast":null,"code":"import { TinyColor } from '@ctrl/tinycolor';\n\nfunction isStableColor(color) {\n  return color >= 0 && color <= 255;\n}\n\nfunction getAlphaColor(frontColor, backgroundColor) {\n  var _TinyColor$toRgb = new TinyColor(frontColor).toRgb(),\n      fR = _TinyColor$toRgb.r,\n      fG = _TinyColor$toRgb.g,\n      fB = _TinyColor$toRgb.b,\n      originAlpha = _TinyColor$toRgb.a;\n\n  if (originAlpha < 1) {\n    return frontColor;\n  }\n\n  var _TinyColor$toRgb2 = new TinyColor(backgroundColor).toRgb(),\n      bR = _TinyColor$toRgb2.r,\n      bG = _TinyColor$toRgb2.g,\n      bB = _TinyColor$toRgb2.b;\n\n  for (var fA = 0.01; fA <= 1; fA += 0.01) {\n    var r = Math.round((fR - bR * (1 - fA)) / fA);\n    var g = Math.round((fG - bG * (1 - fA)) / fA);\n    var b = Math.round((fB - bB * (1 - fA)) / fA);\n    if (isStableColor(r) && isStableColor(g) && isStableColor(b)) return new TinyColor({\n      r: r,\n      g: g,\n      b: b,\n      a: Math.round(fA * 100) / 100\n    }).toRgbString();\n  } // fallback\n\n  /* istanbul ignore next */\n\n\n  return new TinyColor({\n    r: fR,\n    g: fG,\n    b: fB,\n    a: 1\n  }).toRgbString();\n}\n\nexport default getAlphaColor;","map":null,"metadata":{},"sourceType":"module"}