{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport useEvent from \"./useEvent\";\nimport { useLayoutUpdateEffect } from \"./useLayoutEffect\";\nimport useState from \"./useState\";\n/** We only think `undefined` is empty */\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\n\nexport default function useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState; // ======================= Init =======================\n\n\n  var _useState = useState(function () {\n    if (hasValue(value)) {\n      return value;\n    } else if (hasValue(defaultValue)) {\n      return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    } else {\n      return typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      innerValue = _useState2[0],\n      setInnerValue = _useState2[1];\n\n  var mergedValue = value !== undefined ? value : innerValue;\n  var postMergedValue = postState ? postState(mergedValue) : mergedValue; // ====================== Change ======================\n\n  var onChangeFn = useEvent(onChange);\n\n  var _useState3 = useState([mergedValue]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevValue = _useState4[0],\n      setPrevValue = _useState4[1];\n\n  useLayoutUpdateEffect(function () {\n    var prev = prevValue[0];\n\n    if (innerValue !== prev) {\n      onChangeFn(innerValue, prev);\n    }\n  }, [prevValue]); // Sync value back to `undefined` when it from control to un-control\n\n  useLayoutUpdateEffect(function () {\n    if (!hasValue(value)) {\n      setInnerValue(value);\n    }\n  }, [value]); // ====================== Update ======================\n\n  var triggerChange = useEvent(function (updater, ignoreDestroy) {\n    setInnerValue(updater, ignoreDestroy);\n    setPrevValue([mergedValue], ignoreDestroy);\n  });\n  return [postMergedValue, triggerChange];\n}","map":null,"metadata":{},"sourceType":"module"}