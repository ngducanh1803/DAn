{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { createTheme, useCacheToken, useStyleRegister } from '@ant-design/cssinjs';\nimport React from 'react';\nimport version from '../version';\nimport { PresetColors } from './interface';\nimport defaultDerivative from './themes/default';\nimport defaultSeedToken from './themes/seed';\nimport formatToken from './util/alias';\nimport genComponentStyleHook from './util/genComponentStyleHook';\nimport statisticToken, { merge as mergeToken, statistic } from './util/statistic';\nvar defaultTheme = createTheme(defaultDerivative);\nexport { // colors\nPresetColors // Statistic\n, statistic, statisticToken, mergeToken // hooks\n, useStyleRegister, genComponentStyleHook }; // ================================ Context =================================\n// To ensure snapshot stable. We disable hashed in test env.\n\nexport var defaultConfig = {\n  token: defaultSeedToken,\n  hashed: true\n};\nexport var DesignTokenContext = /*#__PURE__*/React.createContext(defaultConfig); // ================================== Hook ==================================\n// In dev env, we refresh salt per hour to avoid user use this\n// Note: Do not modify this to real time update which will make debug harder\n\nvar saltPrefix = process.env.NODE_ENV === 'production' ? version : version + \"-\" + new Date().getHours();\nexport function useToken() {\n  var _React$useContext = React.useContext(DesignTokenContext),\n      rootDesignToken = _React$useContext.token,\n      hashed = _React$useContext.hashed,\n      theme = _React$useContext.theme,\n      components = _React$useContext.components;\n\n  var salt = saltPrefix + \"-\" + (hashed || '');\n  var mergedTheme = theme || defaultTheme;\n\n  var _useCacheToken = useCacheToken(mergedTheme, [defaultSeedToken, rootDesignToken], {\n    salt: salt,\n    override: _extends({\n      override: rootDesignToken\n    }, components),\n    formatToken: formatToken\n  }),\n      _useCacheToken2 = _slicedToArray(_useCacheToken, 2),\n      token = _useCacheToken2[0],\n      hashId = _useCacheToken2[1];\n\n  return [mergedTheme, token, hashed ? hashId : ''];\n}","map":null,"metadata":{},"sourceType":"module"}